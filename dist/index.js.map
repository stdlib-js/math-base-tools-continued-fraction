{
  "version": 3,
  "sources": ["../lib/generators.js", "../lib/basic.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants-float32-smallest-normal' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar a0;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +    a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar isgenerator;\n\tvar delta;\n\tvar f;\n\tvar C;\n\tvar D;\n\tvar v;\n\n\tisgenerator = typeof gen.next === 'function';\n\tv = ( isgenerator ) ? gen.next().value : gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tif ( isgenerator === true ) {\n\t\tdo {\n\t\t\tv = gen.next().value;\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t} else {\n\t\tdo {\n\t\t\tv = gen();\n\t\t\tif ( v ) {\n\t\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\t\tif ( D === 0.0 ) {\n\t\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\t\tif ( C === 0.0 ) {\n\t\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t\t}\n\t\t\t\tD = 1.0 / D;\n\t\t\t\tdelta = C * D;\n\t\t\t\tf *= delta;\n\t\t\t}\n\t\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\t}\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668\u201371. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function* generator() {\n*    var i = 0;\n*    while ( true ) {\n*        i++;\n*        yield [ i, i ];\n*    }\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\tmaxIter = opts.maxIter || MAX_ITER;\n\teps = opts.tolerance || EPS;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nmodule.exports = continuedFraction;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants-float32-smallest-normal' );\n\n\n// VARIABLES //\n\nvar MAX_ITER = 1000000;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*           a1\n*      ---------------\n*      b1 +     a2\n*           ----------\n*            b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionA( gen, factor, maxIter ) {\n\tvar delta;\n\tvar a0;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\ta0 = v[ 0 ];\n\tif ( f === 0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\n\treturn a0 / f;\n}\n\n/**\n* Evaluates a continued fraction expansion.\n*\n* ```text\n*      b0 +   a1\n*      ---------------\n*      b1 +   a2\n*           ----------\n*           b2 +   a3\n*                -----\n*                b3 + ...\n* ```\n*\n* @private\n* @param {Function} gen - function giving terms of continued fraction expansion\n* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term\n* @param {PositiveInteger} maxIter - maximum number of iterations\n* @returns {number} evaluated expansion\n*/\nfunction continuedFractionB( gen, factor, maxIter ) {\n\tvar delta;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar v;\n\n\tv = gen();\n\tf = v[ 1 ];\n\tif ( f === 0.0 ) {\n\t\tf = FLOAT32_SMALLEST_NORMAL;\n\t}\n\tC = f;\n\tD = 0.0;\n\tdo {\n\t\tv = gen();\n\t\tif ( v ) {\n\t\t\tD = v[ 1 ] + ( v[ 0 ] * D );\n\t\t\tif ( D === 0.0 ) {\n\t\t\t\tD = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tC = v[ 1 ] + ( v[ 0 ] / C );\n\t\t\tif ( C === 0.0 ) {\n\t\t\t\tC = FLOAT32_SMALLEST_NORMAL;\n\t\t\t}\n\t\t\tD = 1.0 / D;\n\t\t\tdelta = C * D;\n\t\t\tf *= delta;\n\t\t}\n\t} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus\n\treturn f;\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.\n*\n* ## References\n*\n* -   Lentz, William J. 1976. \"Generating bessel functions in Mie scattering calculations using continued fractions.\" _Applied Optics_ 15 (3): 668\u201371. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).\n*\n* @param {Function} generator - function returning terms of continued fraction expansion\n* @param {Object} [options] - function options\n* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations\n* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance\n* @param {boolean} [options.keep=false] - whether to keep the leading b term\n* @returns {number} value of continued fraction\n*\n* @example\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator();\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\nfunction continuedFraction( generator, options ) {\n\tvar maxIter;\n\tvar opts;\n\tvar eps;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t}\n\teps = opts.tolerance || EPS;\n\tmaxIter = opts.maxIter || MAX_ITER;\n\n\tif ( opts.keep ) {\n\t\treturn continuedFractionB( generator, eps, maxIter );\n\t}\n\treturn continuedFractionA( generator, eps, maxIter );\n}\n\n\n// EXPORTS //\n\nmodule.exports = continuedFraction;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate a continued fraction approximation.\n*\n* @module @stdlib/math-base-tools-continued-fraction\n*\n* @example\n* var continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );\n*\n* // Continued fraction for (e-1)^(-1):\n* var gen = generator()\n* var out = continuedFraction( gen );\n* // returns ~0.582\n*\n* function generator() {\n*    var i = 0;\n*    return function() {\n*        i++;\n*        return [ i, i ];\n*    };\n* }\n*/\n\n// MODULES //\n\nvar hasGeneratorSupport = require( '@stdlib/assert-has-generator-support' );\nvar generator = require( './generators.js' );\nvar basic = require( './basic.js' );\n\n\n// MAIN //\n\nvar continuedFraction;\nif ( hasGeneratorSupport() ) {\n\tcontinuedFraction = generator;\n} else {\n\tcontinuedFraction = basic;\n}\n\n\n// EXPORTS //\n\nmodule.exports = continuedFraction;\n"],
  "mappings": "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",
  "names": ["require_generators", "__commonJSMin", "exports", "module", "abs", "FLOAT32_SMALLEST_NORMAL", "EPS", "MAX_ITER", "continuedFractionA", "gen", "factor", "maxIter", "isgenerator", "delta", "a0", "f", "C", "D", "v", "continuedFractionB", "continuedFraction", "generator", "options", "opts", "eps", "require_basic", "__commonJSMin", "exports", "module", "abs", "EPS", "FLOAT32_SMALLEST_NORMAL", "MAX_ITER", "continuedFractionA", "gen", "factor", "maxIter", "delta", "a0", "C", "D", "f", "v", "continuedFractionB", "continuedFraction", "generator", "options", "opts", "eps", "hasGeneratorSupport", "generator", "basic", "continuedFraction"]
}
